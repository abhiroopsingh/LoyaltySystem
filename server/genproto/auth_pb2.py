# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: auth.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='auth.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\nauth.proto\"B\n\x08UserAuth\x12\n\n\x02id\x18\x01 \x01(\x03\x12\r\n\x05token\x18\x02 \x01(\t\x12\x1b\n\x13\x61uthorized_business\x18\x03 \x01(\x03\"$\n\x10StartAuthRequest\x12\x10\n\x08username\x18\x01 \x01(\t\"@\n\x11StartAuthResponse\x12\x10\n\x08username\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\x03\x12\r\n\x05nonce\x18\x03 \x01(\t\"/\n\rDoAuthRequest\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x12\n\nhash_token\x18\x02 \x01(\t\":\n\x0e\x44oAuthResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x17\n\x04\x61uth\x18\x02 \x01(\x0b\x32\t.UserAuth2j\n\x05Login\x12\x34\n\tStartAuth\x12\x11.StartAuthRequest\x1a\x12.StartAuthResponse\"\x00\x12+\n\x06\x44oAuth\x12\x0e.DoAuthRequest\x1a\x0f.DoAuthResponse\"\x00\x42\x18\n\x16\x63om.loyaltysystem.authb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_USERAUTH = _descriptor.Descriptor(
  name='UserAuth',
  full_name='UserAuth',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='UserAuth.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='token', full_name='UserAuth.token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='authorized_business', full_name='UserAuth.authorized_business', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=14,
  serialized_end=80,
)


_STARTAUTHREQUEST = _descriptor.Descriptor(
  name='StartAuthRequest',
  full_name='StartAuthRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='StartAuthRequest.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=82,
  serialized_end=118,
)


_STARTAUTHRESPONSE = _descriptor.Descriptor(
  name='StartAuthResponse',
  full_name='StartAuthResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='StartAuthResponse.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='StartAuthResponse.id', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='nonce', full_name='StartAuthResponse.nonce', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=120,
  serialized_end=184,
)


_DOAUTHREQUEST = _descriptor.Descriptor(
  name='DoAuthRequest',
  full_name='DoAuthRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='DoAuthRequest.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hash_token', full_name='DoAuthRequest.hash_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=186,
  serialized_end=233,
)


_DOAUTHRESPONSE = _descriptor.Descriptor(
  name='DoAuthResponse',
  full_name='DoAuthResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='DoAuthResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='auth', full_name='DoAuthResponse.auth', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=235,
  serialized_end=293,
)

_DOAUTHRESPONSE.fields_by_name['auth'].message_type = _USERAUTH
DESCRIPTOR.message_types_by_name['UserAuth'] = _USERAUTH
DESCRIPTOR.message_types_by_name['StartAuthRequest'] = _STARTAUTHREQUEST
DESCRIPTOR.message_types_by_name['StartAuthResponse'] = _STARTAUTHRESPONSE
DESCRIPTOR.message_types_by_name['DoAuthRequest'] = _DOAUTHREQUEST
DESCRIPTOR.message_types_by_name['DoAuthResponse'] = _DOAUTHRESPONSE

UserAuth = _reflection.GeneratedProtocolMessageType('UserAuth', (_message.Message,), dict(
  DESCRIPTOR = _USERAUTH,
  __module__ = 'auth_pb2'
  # @@protoc_insertion_point(class_scope:UserAuth)
  ))
_sym_db.RegisterMessage(UserAuth)

StartAuthRequest = _reflection.GeneratedProtocolMessageType('StartAuthRequest', (_message.Message,), dict(
  DESCRIPTOR = _STARTAUTHREQUEST,
  __module__ = 'auth_pb2'
  # @@protoc_insertion_point(class_scope:StartAuthRequest)
  ))
_sym_db.RegisterMessage(StartAuthRequest)

StartAuthResponse = _reflection.GeneratedProtocolMessageType('StartAuthResponse', (_message.Message,), dict(
  DESCRIPTOR = _STARTAUTHRESPONSE,
  __module__ = 'auth_pb2'
  # @@protoc_insertion_point(class_scope:StartAuthResponse)
  ))
_sym_db.RegisterMessage(StartAuthResponse)

DoAuthRequest = _reflection.GeneratedProtocolMessageType('DoAuthRequest', (_message.Message,), dict(
  DESCRIPTOR = _DOAUTHREQUEST,
  __module__ = 'auth_pb2'
  # @@protoc_insertion_point(class_scope:DoAuthRequest)
  ))
_sym_db.RegisterMessage(DoAuthRequest)

DoAuthResponse = _reflection.GeneratedProtocolMessageType('DoAuthResponse', (_message.Message,), dict(
  DESCRIPTOR = _DOAUTHRESPONSE,
  __module__ = 'auth_pb2'
  # @@protoc_insertion_point(class_scope:DoAuthResponse)
  ))
_sym_db.RegisterMessage(DoAuthResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\026com.loyaltysystem.auth'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class LoginStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartAuth = channel.unary_unary(
        '/Login/StartAuth',
        request_serializer=StartAuthRequest.SerializeToString,
        response_deserializer=StartAuthResponse.FromString,
        )
    self.DoAuth = channel.unary_unary(
        '/Login/DoAuth',
        request_serializer=DoAuthRequest.SerializeToString,
        response_deserializer=DoAuthResponse.FromString,
        )


class LoginServicer(object):

  def StartAuth(self, request, context):
    """StartAuth is the beginning of the
    authentication flow. The client sends a
    username they would like to authenticate
    as, and the server returns a nonce to
    hash the password with.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DoAuth(self, request, context):
    """DoAuth is the second portion of the authentication.
    The client sends the user ID and a hash of their
    password combined with the nonce. If successful,
    then the server will return back the token to use in
    future requests.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartAuth': grpc.unary_unary_rpc_method_handler(
          servicer.StartAuth,
          request_deserializer=StartAuthRequest.FromString,
          response_serializer=StartAuthResponse.SerializeToString,
      ),
      'DoAuth': grpc.unary_unary_rpc_method_handler(
          servicer.DoAuth,
          request_deserializer=DoAuthRequest.FromString,
          response_serializer=DoAuthResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Login', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaLoginServicer(object):
  def StartAuth(self, request, context):
    """StartAuth is the beginning of the
    authentication flow. The client sends a
    username they would like to authenticate
    as, and the server returns a nonce to
    hash the password with.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DoAuth(self, request, context):
    """DoAuth is the second portion of the authentication.
    The client sends the user ID and a hash of their
    password combined with the nonce. If successful,
    then the server will return back the token to use in
    future requests.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaLoginStub(object):
  def StartAuth(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """StartAuth is the beginning of the
    authentication flow. The client sends a
    username they would like to authenticate
    as, and the server returns a nonce to
    hash the password with.
    """
    raise NotImplementedError()
  StartAuth.future = None
  def DoAuth(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """DoAuth is the second portion of the authentication.
    The client sends the user ID and a hash of their
    password combined with the nonce. If successful,
    then the server will return back the token to use in
    future requests.
    """
    raise NotImplementedError()
  DoAuth.future = None


def beta_create_Login_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Login', 'DoAuth'): DoAuthRequest.FromString,
    ('Login', 'StartAuth'): StartAuthRequest.FromString,
  }
  response_serializers = {
    ('Login', 'DoAuth'): DoAuthResponse.SerializeToString,
    ('Login', 'StartAuth'): StartAuthResponse.SerializeToString,
  }
  method_implementations = {
    ('Login', 'DoAuth'): face_utilities.unary_unary_inline(servicer.DoAuth),
    ('Login', 'StartAuth'): face_utilities.unary_unary_inline(servicer.StartAuth),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Login_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Login', 'DoAuth'): DoAuthRequest.SerializeToString,
    ('Login', 'StartAuth'): StartAuthRequest.SerializeToString,
  }
  response_deserializers = {
    ('Login', 'DoAuth'): DoAuthResponse.FromString,
    ('Login', 'StartAuth'): StartAuthResponse.FromString,
  }
  cardinalities = {
    'DoAuth': cardinality.Cardinality.UNARY_UNARY,
    'StartAuth': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Login', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
